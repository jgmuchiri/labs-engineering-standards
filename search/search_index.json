{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 This document describes the engineering standards that teams working in Lambda X must comply with. Adherence to these standards are critical to the continued success of the Lambda X organization, as they allow us to more effectively manage the scores of teams working across hundreds of products. Topics \u00b6 This guide is divided into separate topics, saved here in Notion as pages. A topic corresponds to a specific area of concern in software engineering. The topics can all be viewed in the menu at the top of the page. Standards \u00b6 The standards in this guide do not cover all choices in technology. Many are purposely omitted as they are not considered impactful to the quality of the overall program. However, this guide is exclusive, in that if a technology choice is not mentioned as part of a topic, you can assume the use of that technology is prohibited. When in doubt, please open an issue or submit a PR to start a discussion. Contributing \u00b6 These standards will morph over time as we adapt to the ever-changing technology landscape. In addition, the stardards will embrace a subset of all of the available technologies, so that teams have options when making technical decisions. To in order to ensure that these documents are inclusive of the needs of all Labs groups, each new standard or change to an existing standard will be ratified by approval from 3 Labs Tech Leads. Writing Standards","title":"Home"},{"location":"#overview","text":"This document describes the engineering standards that teams working in Lambda X must comply with. Adherence to these standards are critical to the continued success of the Lambda X organization, as they allow us to more effectively manage the scores of teams working across hundreds of products.","title":"Overview"},{"location":"#topics","text":"This guide is divided into separate topics, saved here in Notion as pages. A topic corresponds to a specific area of concern in software engineering. The topics can all be viewed in the menu at the top of the page.","title":"Topics"},{"location":"#standards","text":"The standards in this guide do not cover all choices in technology. Many are purposely omitted as they are not considered impactful to the quality of the overall program. However, this guide is exclusive, in that if a technology choice is not mentioned as part of a topic, you can assume the use of that technology is prohibited. When in doubt, please open an issue or submit a PR to start a discussion.","title":"Standards"},{"location":"#contributing","text":"These standards will morph over time as we adapt to the ever-changing technology landscape. In addition, the stardards will embrace a subset of all of the available technologies, so that teams have options when making technical decisions. To in order to ensure that these documents are inclusive of the needs of all Labs groups, each new standard or change to an existing standard will be ratified by approval from 3 Labs Tech Leads. Writing Standards","title":"Contributing"},{"location":"topics/code-quality/","text":"Code Quality \u00b6 (CQ-100) High Maintainability \u00b6 Requirements: All repositories must maintain their master branch at a Code Climate maintainability score of C or above. This score must be updated immediately after code is merged into the master branch. The maintainability score must be displayed near the top of the README at the root of the repository. Rationale: Code Climate provides a robust and industry standard measure for the maintainability of a code base. While this is only one of many possible measures, Code Climate provides a solid baseline for measuring code quality. Exceptions: The following types of repositories are excluded from this standard: Data science repos containing only Jupyter Notebooks Static websites not containing any code Repos containing only programming languages not supported by Code Climate The following types of code can be excluded from your maintainability score: Test code Data migration code (CQ-110) Robust Test Coverage \u00b6 Requirements: All repositories are required to maintain a code coverage level of 30% or higher for their master branch. Code coverage percentage must be published whenever code is pushed into the master branch. The code coverage percentage must be displayed near the top of the README at the root of the repository. All application code must be included in the coverage percentage, even if tests have yet to be written for the code. Rationale: Code coverage is an indicator of how well test cases cover the codebase. While not a singular indicator of test quality, it is an important factor in ensuring that test cases cover a wide area of the codebase. Exceptions: The following types of repositories are excluded from this standard: Data science repos containing only Jupyter Notebooks Static websites not containing any code The following code can be excluded from your test coverage percentage: Test code Data migration code (CQ-120) Code Cleanliness \u00b6 When code is no longer wanted, delete it. Never commit commented out code. Pull requests should not be approved until these comments have been removed. Rationale: Standard git usage already tracks removed code so that it's not lost. Leaving commented code leave the code base littered with distractions to the actual code flow. Exceptions: None","title":"Code Quality"},{"location":"topics/code-quality/#code-quality","text":"","title":"Code Quality"},{"location":"topics/code-quality/#cq-100-high-maintainability","text":"Requirements: All repositories must maintain their master branch at a Code Climate maintainability score of C or above. This score must be updated immediately after code is merged into the master branch. The maintainability score must be displayed near the top of the README at the root of the repository. Rationale: Code Climate provides a robust and industry standard measure for the maintainability of a code base. While this is only one of many possible measures, Code Climate provides a solid baseline for measuring code quality. Exceptions: The following types of repositories are excluded from this standard: Data science repos containing only Jupyter Notebooks Static websites not containing any code Repos containing only programming languages not supported by Code Climate The following types of code can be excluded from your maintainability score: Test code Data migration code","title":"(CQ-100) High Maintainability"},{"location":"topics/code-quality/#cq-110-robust-test-coverage","text":"Requirements: All repositories are required to maintain a code coverage level of 30% or higher for their master branch. Code coverage percentage must be published whenever code is pushed into the master branch. The code coverage percentage must be displayed near the top of the README at the root of the repository. All application code must be included in the coverage percentage, even if tests have yet to be written for the code. Rationale: Code coverage is an indicator of how well test cases cover the codebase. While not a singular indicator of test quality, it is an important factor in ensuring that test cases cover a wide area of the codebase. Exceptions: The following types of repositories are excluded from this standard: Data science repos containing only Jupyter Notebooks Static websites not containing any code The following code can be excluded from your test coverage percentage: Test code Data migration code","title":"(CQ-110) Robust Test Coverage"},{"location":"topics/code-quality/#cq-120-code-cleanliness","text":"When code is no longer wanted, delete it. Never commit commented out code. Pull requests should not be approved until these comments have been removed. Rationale: Standard git usage already tracks removed code so that it's not lost. Leaving commented code leave the code base littered with distractions to the actual code flow. Exceptions: None","title":"(CQ-120) Code Cleanliness"},{"location":"topics/data-persistence/","text":"Data Persistence \u00b6 (DP-100) Managed Services Only \u00b6 Only fully managed storage services are to be used for hosting a database in a shared environment. Rationale: Managing database servers is an incredibly complex and resource intensive endeavor. By utilizing management services, that operational overhead are greatly reduced. Exceptions: None (DP-200) Approved Database Engines \u00b6 Only the following database engines are approved for project in Labs: Engine Permitted Versions Providers Postgres > 11.5.0 AWS RDS Heroku Postgres All other database engines are prohibited, including: MongoDB, SQLite, MySQL, DB2 Rationale: We restrict the database engine use in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"Data Persistence"},{"location":"topics/data-persistence/#data-persistence","text":"","title":"Data Persistence"},{"location":"topics/data-persistence/#dp-100-managed-services-only","text":"Only fully managed storage services are to be used for hosting a database in a shared environment. Rationale: Managing database servers is an incredibly complex and resource intensive endeavor. By utilizing management services, that operational overhead are greatly reduced. Exceptions: None","title":"(DP-100) Managed Services Only"},{"location":"topics/data-persistence/#dp-200-approved-database-engines","text":"Only the following database engines are approved for project in Labs: Engine Permitted Versions Providers Postgres > 11.5.0 AWS RDS Heroku Postgres All other database engines are prohibited, including: MongoDB, SQLite, MySQL, DB2 Rationale: We restrict the database engine use in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"(DP-200) Approved Database Engines"},{"location":"topics/developer-workflow/","text":"Developer Workflow \u00b6 (DW-100) One path to deployment \u00b6 Workflow for all Lab products must follow the diagram below. Original Rationale: Standard workflow helps create a common language for a team to use and understand the state of a task and the project Exceptions: None","title":"Developer Workflow"},{"location":"topics/developer-workflow/#developer-workflow","text":"","title":"Developer Workflow"},{"location":"topics/developer-workflow/#dw-100-one-path-to-deployment","text":"Workflow for all Lab products must follow the diagram below. Original Rationale: Standard workflow helps create a common language for a team to use and understand the state of a task and the project Exceptions: None","title":"(DW-100) One path to deployment"},{"location":"topics/git/","text":"Git \u00b6 (GIT-100) Git Basics \u00b6 Basic git commands (as outlined in the Web Training Kit ) should be understood. Rationale: Basic git branching is required for teams to work effectively; avoiding complications and delays. Exceptions: None (GT-110) Only Branch from Master \u00b6 All branches must be created from the Master branch Rationale: Multiple levels of branching from master creates opportunities for conflicts Exceptions: None (CQ-120) Cleanup merged branches \u00b6 After a branch has been merged to master, it must be immediately delete. Rationale: Short-lived branches are a best-practice for minimizing merge conflicts. Leaving many branches active in a repository makes it difficult for team members to navigate the ongoing work. Once a branch has been reviewed, approved and merged into the master branch, it should be immediately deleted. A healthy Git repository has a minimum of active branches. This is easy to comply with using GitHub . Exceptions: None","title":"Git"},{"location":"topics/git/#git","text":"","title":"Git"},{"location":"topics/git/#git-100-git-basics","text":"Basic git commands (as outlined in the Web Training Kit ) should be understood. Rationale: Basic git branching is required for teams to work effectively; avoiding complications and delays. Exceptions: None","title":"(GIT-100) Git Basics"},{"location":"topics/git/#gt-110-only-branch-from-master","text":"All branches must be created from the Master branch Rationale: Multiple levels of branching from master creates opportunities for conflicts Exceptions: None","title":"(GT-110) Only Branch from Master"},{"location":"topics/git/#cq-120-cleanup-merged-branches","text":"After a branch has been merged to master, it must be immediately delete. Rationale: Short-lived branches are a best-practice for minimizing merge conflicts. Leaving many branches active in a repository makes it difficult for team members to navigate the ongoing work. Once a branch has been reviewed, approved and merged into the master branch, it should be immediately deleted. A healthy Git repository has a minimum of active branches. This is easy to comply with using GitHub . Exceptions: None","title":"(CQ-120) Cleanup merged branches"},{"location":"topics/github/","text":"Github \u00b6 (GH-100) One GitHub Organization \u00b6 Code for all student GitHub projects must be stored in the Lambda School Labs Github organization: https://github.com/Lambda-School-Labs Rationale: Centralizing code into a single organization allows for easier management. (GH-101) Organization Roles \u00b6 Lambda School staff and Section Leads will have the Owner role. All other organization members will have the Member role. Rationale: Least privilege Exceptions: None (GH-200) Dedicated GitHub Teams \u00b6 Each project team will have their own dedicated GitHub team within the Lambda School Labs organization. Rationale: Project specific teams allows for easier application of precise (least privilege) permissions as well as easier provisioning and de-provisioning as cohorts begin and end. Exceptions: None (GH-201) GitHub Team Naming \u00b6 GitHub project teams shall be created using the following convention: Name: <Cohort> - <Product> (Example: Labs 20 - Brew Plans ) Rationale: GitHub teams have no mechanism for storing metadata, so the product name and cohort must be encoded in the team name. Exceptions: None (GH-202) GitHub Team Roles \u00b6 GitHub project team membership and team roles will be as follows: Section Lead \u21d2 Maintainer Team Lead \u21d2 Maintainer Student \u21d2 Member Rationale: Least privilege access Exceptions: None (GH-300) GitHub Repo Naming \u00b6 GitHub repos shall be named in all lowercase using the following convention: Name: <Product>-<Purpose>-<Postfix> The Product name can be stripped of special characters, shortened or otherwise made to be more readable, though it should remain consistent across repositories. The Purpose must be one of the following fe for a front-end repository be for a back-end repository ds for a data science repository mobile for a cross-platform mobile repository ios for an iOS specific mobile repository android for an Android specific mobile repository site for a static website associated with the product The Postfix is an arbitrary string that can be appended when multiple repositories with the same purpose are require for a particular product. Rationale: GitHub repositories have no mechanism for storing metadata, so the product name and purpose must be encoded in the repo name. Exceptions: None (GH-310) GitHub Templates \u00b6 All GitHub repositories must be created using one of the following templates: https://github.com/Lambda-School-Labs/template-fe https://github.com/Lambda-School-Labs/template-be https://github.com/Lambda-School-Labs/template-ds https://github.com/Lambda-School-Labs/template-android https://github.com/Lambda-School-Labs/template-site Rationale: Consistency is critical for managing a highly complex organization at scale. Starting from the same basic template helps to maintain this consistency. Exceptions: None (GH-311) Require GitHub Branch Protection setup for master branch \u00b6 All GitHub repositories must be setup with branch protection enabled for the master branch as follows: Required approving reviews: 2 (or more) Require status checks to be passing before merging (enabled) Require branches to be up to date before merging (enabled) Include administrators (enabled) Rationale: The master branch is a direct reflection of the code that is deployed to the production environment. As such, it is crucial that all code headed to the master branch be carefully reviewed and tested before a merge. Exceptions: None (GH-320) GitHub Repo Licensing \u00b6 The README in the root of each GitHub repository must advertise that the code is maintained under the MIT license. There must be a file named LICENSE in the root of the directory using the MIT license format as described here: https://opensource.org/licenses/MIT Use the year the project was created for the year Use 'Lambda School' as the copyright holder Rationale: Code written during Labs projects must be maintained as open-source so that it can be reference by hiring managers considering Lambda School students as candidates. The MIT license is very permissive and provides opportunities for student developed code to be reused and expanded by the open source community. Exceptions: None (GH-330) GitHub Repo Badges \u00b6 The README in the root of each GitHub repository must contain the following badges: Code Climate Maintainability https://codeclimate.com/github/codeclimate/codeclimate/badges Code Climate Test Coverage https://codeclimate.com/github/codeclimate/codeclimate/badges Rationale: Code Climate is the standard system for ensuring quality across all Labs products. Displaying a badge front and center in a repo is important to maintain visibility into the state of the codebase. Exceptions: Any repository with code that is not supported by Code Climate","title":"GitHub"},{"location":"topics/github/#github","text":"","title":"Github"},{"location":"topics/github/#gh-100-one-github-organization","text":"Code for all student GitHub projects must be stored in the Lambda School Labs Github organization: https://github.com/Lambda-School-Labs Rationale: Centralizing code into a single organization allows for easier management.","title":"(GH-100) One GitHub Organization"},{"location":"topics/github/#gh-101-organization-roles","text":"Lambda School staff and Section Leads will have the Owner role. All other organization members will have the Member role. Rationale: Least privilege Exceptions: None","title":"(GH-101) Organization Roles"},{"location":"topics/github/#gh-200-dedicated-github-teams","text":"Each project team will have their own dedicated GitHub team within the Lambda School Labs organization. Rationale: Project specific teams allows for easier application of precise (least privilege) permissions as well as easier provisioning and de-provisioning as cohorts begin and end. Exceptions: None","title":"(GH-200) Dedicated GitHub Teams"},{"location":"topics/github/#gh-201-github-team-naming","text":"GitHub project teams shall be created using the following convention: Name: <Cohort> - <Product> (Example: Labs 20 - Brew Plans ) Rationale: GitHub teams have no mechanism for storing metadata, so the product name and cohort must be encoded in the team name. Exceptions: None","title":"(GH-201) GitHub Team Naming"},{"location":"topics/github/#gh-202-github-team-roles","text":"GitHub project team membership and team roles will be as follows: Section Lead \u21d2 Maintainer Team Lead \u21d2 Maintainer Student \u21d2 Member Rationale: Least privilege access Exceptions: None","title":"(GH-202) GitHub Team Roles"},{"location":"topics/github/#gh-300-github-repo-naming","text":"GitHub repos shall be named in all lowercase using the following convention: Name: <Product>-<Purpose>-<Postfix> The Product name can be stripped of special characters, shortened or otherwise made to be more readable, though it should remain consistent across repositories. The Purpose must be one of the following fe for a front-end repository be for a back-end repository ds for a data science repository mobile for a cross-platform mobile repository ios for an iOS specific mobile repository android for an Android specific mobile repository site for a static website associated with the product The Postfix is an arbitrary string that can be appended when multiple repositories with the same purpose are require for a particular product. Rationale: GitHub repositories have no mechanism for storing metadata, so the product name and purpose must be encoded in the repo name. Exceptions: None","title":"(GH-300) GitHub Repo Naming"},{"location":"topics/github/#gh-310-github-templates","text":"All GitHub repositories must be created using one of the following templates: https://github.com/Lambda-School-Labs/template-fe https://github.com/Lambda-School-Labs/template-be https://github.com/Lambda-School-Labs/template-ds https://github.com/Lambda-School-Labs/template-android https://github.com/Lambda-School-Labs/template-site Rationale: Consistency is critical for managing a highly complex organization at scale. Starting from the same basic template helps to maintain this consistency. Exceptions: None","title":"(GH-310) GitHub Templates"},{"location":"topics/github/#gh-311-require-github-branch-protection-setup-for-master-branch","text":"All GitHub repositories must be setup with branch protection enabled for the master branch as follows: Required approving reviews: 2 (or more) Require status checks to be passing before merging (enabled) Require branches to be up to date before merging (enabled) Include administrators (enabled) Rationale: The master branch is a direct reflection of the code that is deployed to the production environment. As such, it is crucial that all code headed to the master branch be carefully reviewed and tested before a merge. Exceptions: None","title":"(GH-311) Require GitHub Branch Protection setup for master branch"},{"location":"topics/github/#gh-320-github-repo-licensing","text":"The README in the root of each GitHub repository must advertise that the code is maintained under the MIT license. There must be a file named LICENSE in the root of the directory using the MIT license format as described here: https://opensource.org/licenses/MIT Use the year the project was created for the year Use 'Lambda School' as the copyright holder Rationale: Code written during Labs projects must be maintained as open-source so that it can be reference by hiring managers considering Lambda School students as candidates. The MIT license is very permissive and provides opportunities for student developed code to be reused and expanded by the open source community. Exceptions: None","title":"(GH-320) GitHub Repo Licensing"},{"location":"topics/github/#gh-330-github-repo-badges","text":"The README in the root of each GitHub repository must contain the following badges: Code Climate Maintainability https://codeclimate.com/github/codeclimate/codeclimate/badges Code Climate Test Coverage https://codeclimate.com/github/codeclimate/codeclimate/badges Rationale: Code Climate is the standard system for ensuring quality across all Labs products. Displaying a badge front and center in a repo is important to maintain visibility into the state of the codebase. Exceptions: Any repository with code that is not supported by Code Climate","title":"(GH-330) GitHub Repo Badges"},{"location":"topics/node-js/","text":"Node.js \u00b6 (NJ-100) Approved Package Managers \u00b6 Only the following Node.js package managers are approved for projects in Labs: NPM Version > 6.0.0 Yarn Version > 2.0.0 Preferred Rationale: Well executed package management is a crucial to the realization of a stable and consistent Node-based product. Only mature and stable package managers are permitted on Labs projects. Alternatives: None Exceptions: None","title":"Node.js"},{"location":"topics/node-js/#nodejs","text":"","title":"Node.js"},{"location":"topics/node-js/#nj-100-approved-package-managers","text":"Only the following Node.js package managers are approved for projects in Labs: NPM Version > 6.0.0 Yarn Version > 2.0.0 Preferred Rationale: Well executed package management is a crucial to the realization of a stable and consistent Node-based product. Only mature and stable package managers are permitted on Labs projects. Alternatives: None Exceptions: None","title":"(NJ-100) Approved Package Managers"},{"location":"topics/programming-languages/","text":"Programming Languages \u00b6 (PL-100) Approved Programming Languages \u00b6 Language Frontend Backend Mobile Java Prohibited Java SE 12 See PL-110 Java SE 13 Javascript See PL-110 See PL-110 See PL-110 Python Prohibited See PL-110 Prohibited C# Prohibited Prohibited Prohibited PHP Prohibited Prohibited Prohibited C/C++ Prohibited Prohibited Prohibited Objective-C Prohibited Prohibited Prohibited Rationale: We restrict the programming languages and frameworks in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None (PL-110) Approved Frameworks \u00b6 Framework Permitted Versions Notes React > 16.10 Create React App > 3.0.0 Next.js None Prohibited Angular None Prohibited Vue.js None Prohibited Spring Framework > 5.2.0 Spring Boot > 2.0.0 Node.js > 12 Express > 4.17.0 Android SDK > 10 React Native > 0.60 Flask > 1.0 Rationale: We restrict the frameworks and versions in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"Programming Languages"},{"location":"topics/programming-languages/#programming-languages","text":"","title":"Programming Languages"},{"location":"topics/programming-languages/#pl-100-approved-programming-languages","text":"Language Frontend Backend Mobile Java Prohibited Java SE 12 See PL-110 Java SE 13 Javascript See PL-110 See PL-110 See PL-110 Python Prohibited See PL-110 Prohibited C# Prohibited Prohibited Prohibited PHP Prohibited Prohibited Prohibited C/C++ Prohibited Prohibited Prohibited Objective-C Prohibited Prohibited Prohibited Rationale: We restrict the programming languages and frameworks in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"(PL-100) Approved Programming Languages"},{"location":"topics/programming-languages/#pl-110-approved-frameworks","text":"Framework Permitted Versions Notes React > 16.10 Create React App > 3.0.0 Next.js None Prohibited Angular None Prohibited Vue.js None Prohibited Spring Framework > 5.2.0 Spring Boot > 2.0.0 Node.js > 12 Express > 4.17.0 Android SDK > 10 React Native > 0.60 Flask > 1.0 Rationale: We restrict the frameworks and versions in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"(PL-110) Approved Frameworks"},{"location":"topics/security/","text":"Application Security \u00b6 (SC-100) Never Commit Secrets \u00b6 No secrets, credentials or sensitive data shall ever be committed to a Git repository, either local or remote. Rationale: Secrets provide access to administrative functions as well as protected data. Exposing secrets in a repository is a primary attack vector for compromised systems that is exploited every day on the internet. Secrets must be protected at all times and are instantly at risk and exposed when committed into a source code repository. Alternatives: Communicating shared secrets should only be done via email or Slack. (Note: This will change as we're working on making a secrets management tool available.) Use dotenv or an equivalent tool to put secrets into your local environment, which can then be read by your application at runtime. (SC-200) Never Store Secrets \u00b6 No software shall maintain user secrets in application storage. Rationale: Effectively storing and protecting secrets is extremely difficult and incurs a great deal of design, development and operational overhead. Alternatives: Always use a trusted 3rd party Identity Provider (IdP) to authenticate users. Exceptions: Non-user specific secrets (e.g. api keys, etc.) should be stored using secure services and provided to the application at runtime using environment variables.","title":"Security"},{"location":"topics/security/#application-security","text":"","title":"Application Security"},{"location":"topics/security/#sc-100-never-commit-secrets","text":"No secrets, credentials or sensitive data shall ever be committed to a Git repository, either local or remote. Rationale: Secrets provide access to administrative functions as well as protected data. Exposing secrets in a repository is a primary attack vector for compromised systems that is exploited every day on the internet. Secrets must be protected at all times and are instantly at risk and exposed when committed into a source code repository. Alternatives: Communicating shared secrets should only be done via email or Slack. (Note: This will change as we're working on making a secrets management tool available.) Use dotenv or an equivalent tool to put secrets into your local environment, which can then be read by your application at runtime.","title":"(SC-100) Never Commit Secrets"},{"location":"topics/security/#sc-200-never-store-secrets","text":"No software shall maintain user secrets in application storage. Rationale: Effectively storing and protecting secrets is extremely difficult and incurs a great deal of design, development and operational overhead. Alternatives: Always use a trusted 3rd party Identity Provider (IdP) to authenticate users. Exceptions: Non-user specific secrets (e.g. api keys, etc.) should be stored using secure services and provided to the application at runtime using environment variables.","title":"(SC-200) Never Store Secrets"},{"location":"topics/third-party-services/","text":"3rd Party Services \u00b6 (TH-100) Approved Code Repositories \u00b6 The only permitted code repositories for Lambda School Labs projects are listed below: GitHub Specifically the Lambda School Labs organization All others are prohibited from use. Rationale: Lambda School Labs produces thousands of lines of code per week. It is essential that this code be centrally managed to provide safe-keeping for the code over time. Alternatives: None Exceptions: None (TH-110) Approved Hosting Providers \u00b6 The only permitted hosting providers for Lambda School Labs projects are listed below: Amazon Web Services (AWS) Heroku All others are prohibited from use, including: Firebase Google Cloud Platform Zeit Netlify Rationale: We restrict hosting choices in Lambda Labs so that we can focus our resources on a subset of available providers. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None (TH-120) Approved Identity Providers \u00b6 The only permitted identity providers for Lambda School Labs projects are listed below: Okta All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-130) Approved CI/CD Platforms \u00b6 The only permitted CI/CD platforms for Lambda School Labs projects are listed below: GitHub Actions Native AWS Services Native Heroku Services All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-140) Approved Domain Registrars \u00b6 The only permitted domain registration for Lambda School Labs projects are listed below: Namecheap \u2757\ufe0fOnly when provisioned using the Labs Tech Provisioning Process All other services are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-150) Approved Online Payment Services \u00b6 The only permitted online payment processing for Lambda School Labs projects are listed below: Stripe All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-160) Approved Text Messaging Services \u00b6 The only permitted text messaging for Lambda School Labs projects are listed below: Twilio All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-170) Approved Email Services \u00b6 The only permitted email services for Lambda School Labs projects are listed below: SendGrid All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-180) Approved Mapping Services \u00b6 The only permitted mapping services for Lambda School Labs projects are listed below: Google Maps MapBox All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-190) Approved Mobile App Stores \u00b6 The only permitted mobile app stores for Lambda School Labs projects are listed below: Google Play Apple App Store All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-200) Approved Code Quality Services \u00b6 The only permitted code quality services for Lambda School Labs projects are listed below: CodeClimate All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-210) Approved User Analytics Services \u00b6 The only permitted user analytics services for Lambda School Labs projects are listed below: Google Analytics All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None (TH-220) Approved Exception Monitoring Services \u00b6 The only permitted user analytics services for Lambda School Labs projects are listed below: Sentry All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"Third Party Services"},{"location":"topics/third-party-services/#3rd-party-services","text":"","title":"3rd Party Services"},{"location":"topics/third-party-services/#th-100-approved-code-repositories","text":"The only permitted code repositories for Lambda School Labs projects are listed below: GitHub Specifically the Lambda School Labs organization All others are prohibited from use. Rationale: Lambda School Labs produces thousands of lines of code per week. It is essential that this code be centrally managed to provide safe-keeping for the code over time. Alternatives: None Exceptions: None","title":"(TH-100) Approved Code Repositories"},{"location":"topics/third-party-services/#th-110-approved-hosting-providers","text":"The only permitted hosting providers for Lambda School Labs projects are listed below: Amazon Web Services (AWS) Heroku All others are prohibited from use, including: Firebase Google Cloud Platform Zeit Netlify Rationale: We restrict hosting choices in Lambda Labs so that we can focus our resources on a subset of available providers. By narrowing the field of choices, we feel that product quality will be improved through the sharing of common knowledge and reusable components. Exceptions: None","title":"(TH-110) Approved Hosting Providers"},{"location":"topics/third-party-services/#th-120-approved-identity-providers","text":"The only permitted identity providers for Lambda School Labs projects are listed below: Okta All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-120) Approved Identity Providers"},{"location":"topics/third-party-services/#th-130-approved-cicd-platforms","text":"The only permitted CI/CD platforms for Lambda School Labs projects are listed below: GitHub Actions Native AWS Services Native Heroku Services All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-130) Approved CI/CD Platforms"},{"location":"topics/third-party-services/#th-140-approved-domain-registrars","text":"The only permitted domain registration for Lambda School Labs projects are listed below: Namecheap \u2757\ufe0fOnly when provisioned using the Labs Tech Provisioning Process All other services are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-140) Approved Domain Registrars"},{"location":"topics/third-party-services/#th-150-approved-online-payment-services","text":"The only permitted online payment processing for Lambda School Labs projects are listed below: Stripe All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-150) Approved Online Payment Services"},{"location":"topics/third-party-services/#th-160-approved-text-messaging-services","text":"The only permitted text messaging for Lambda School Labs projects are listed below: Twilio All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-160) Approved Text Messaging Services"},{"location":"topics/third-party-services/#th-170-approved-email-services","text":"The only permitted email services for Lambda School Labs projects are listed below: SendGrid All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-170) Approved Email Services"},{"location":"topics/third-party-services/#th-180-approved-mapping-services","text":"The only permitted mapping services for Lambda School Labs projects are listed below: Google Maps MapBox All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-180) Approved Mapping Services"},{"location":"topics/third-party-services/#th-190-approved-mobile-app-stores","text":"The only permitted mobile app stores for Lambda School Labs projects are listed below: Google Play Apple App Store All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-190) Approved Mobile App Stores"},{"location":"topics/third-party-services/#th-200-approved-code-quality-services","text":"The only permitted code quality services for Lambda School Labs projects are listed below: CodeClimate All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-200) Approved Code Quality Services"},{"location":"topics/third-party-services/#th-210-approved-user-analytics-services","text":"The only permitted user analytics services for Lambda School Labs projects are listed below: Google Analytics All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-210) Approved User Analytics Services"},{"location":"topics/third-party-services/#th-220-approved-exception-monitoring-services","text":"The only permitted user analytics services for Lambda School Labs projects are listed below: Sentry All others are prohibited from use. Rationale: Standardizing on a small number of services allows for students and staff to better share knowledge and code Alternatives: None Exceptions: None","title":"(TH-220) Approved Exception Monitoring Services"},{"location":"topics/web-api-frameworks/","text":"Web API Frameworks \u00b6 (AA-100) Approved Architectures \u00b6 Only the following web API frameworks are approved for projects in Labs: REST GraphQL Rationale: We restrict the web API frameworks used in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, product quality will be improved through the sharing of common knowledge and reusable components. These two frameworks cover the vast majority of use cases, enjoy significant market share, and are not mutually exclusive. Exceptions: None","title":"Web API Frameworks"},{"location":"topics/web-api-frameworks/#web-api-frameworks","text":"","title":"Web API Frameworks"},{"location":"topics/web-api-frameworks/#aa-100-approved-architectures","text":"Only the following web API frameworks are approved for projects in Labs: REST GraphQL Rationale: We restrict the web API frameworks used in Lambda Labs so that we can focus our resources on a subset of available technologies. By narrowing the field of choices, product quality will be improved through the sharing of common knowledge and reusable components. These two frameworks cover the vast majority of use cases, enjoy significant market share, and are not mutually exclusive. Exceptions: None","title":"(AA-100) Approved Architectures"},{"location":"topics/writing-standards/","text":"Writing Standards \u00b6 Note If you add, remove or change the name of a topic document, be sure to update the mkdocs.yml file Topics section Format \u00b6 Each of the Topics will include a set of Standards. With each Standard being defined using the following template: <Title> (<Reference ID>) <Description> Rationale: - ... - ... Alternatives: - ... - ... Exceptions: - ... - ... Title \u00b6 A short and descriptive title to refer to the standard in conversation Reference ID \u00b6 An ID to use for referencing the standard in other documentation or automation. Description \u00b6 A clear, concise, specific and actionable description of the standard. Each standard must contain words that clearly direct decision making. Use words such as *shall, must, always and never. This ID should never be changed once the standard has been set. If the standard is no longer relevant or if the contents has changed significantly, the old standard should be retired and replaced with a new standard and new ID. Format: <Two Letter Abbreviation>-<Numerical Code> The abbreviation should be reflective of the area the standard is part of. The code is a 3-digit number starting from 100. Alternatives \u00b6 One or more bullets suggesting alternatives for standards that prohibit some choice Rationale \u00b6 One or more bullets describing the reason the standard exists Linting \u00b6 All submissions must be linted using markdownlint by David Anson CLI VS Code Note: There's a configuration file in the root of the repository that has some small tweaks to the format.","title":"Writing Standards"},{"location":"topics/writing-standards/#writing-standards","text":"Note If you add, remove or change the name of a topic document, be sure to update the mkdocs.yml file Topics section","title":"Writing Standards"},{"location":"topics/writing-standards/#format","text":"Each of the Topics will include a set of Standards. With each Standard being defined using the following template: <Title> (<Reference ID>) <Description> Rationale: - ... - ... Alternatives: - ... - ... Exceptions: - ... - ...","title":"Format"},{"location":"topics/writing-standards/#title","text":"A short and descriptive title to refer to the standard in conversation","title":"Title"},{"location":"topics/writing-standards/#reference-id","text":"An ID to use for referencing the standard in other documentation or automation.","title":"Reference ID"},{"location":"topics/writing-standards/#description","text":"A clear, concise, specific and actionable description of the standard. Each standard must contain words that clearly direct decision making. Use words such as *shall, must, always and never. This ID should never be changed once the standard has been set. If the standard is no longer relevant or if the contents has changed significantly, the old standard should be retired and replaced with a new standard and new ID. Format: <Two Letter Abbreviation>-<Numerical Code> The abbreviation should be reflective of the area the standard is part of. The code is a 3-digit number starting from 100.","title":"Description"},{"location":"topics/writing-standards/#alternatives","text":"One or more bullets suggesting alternatives for standards that prohibit some choice","title":"Alternatives"},{"location":"topics/writing-standards/#rationale","text":"One or more bullets describing the reason the standard exists","title":"Rationale"},{"location":"topics/writing-standards/#linting","text":"All submissions must be linted using markdownlint by David Anson CLI VS Code Note: There's a configuration file in the root of the repository that has some small tweaks to the format.","title":"Linting"}]}